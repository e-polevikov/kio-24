/**
 * Задача. Процесс "3x+1" устроен так. Он начинается с натурального числа, если оно четное, его надо поделить на два.
 * Если нечетное, то x -> 3x + 1. Для всех чисел от 1 до 999 этот процесс рано или поздно приводит к 1.
 * Нужно придумать начальное число от 1 до 999 так, чтобы количество шагов было как можно больше, при этом, чтобы
 * максимальное число, полученное в процессе, было как можно меньше. Т.е. участник вводит одно число, а программа
 * считает два параметра. Количество шагов перед приходом к единице и максимальное число, которое при этом получается.
 * Первый параметр должен быть как можно больше, второй — как можно меньше.

 Разработка задачи начинается с выбора идентификатора. Он должен состоять из маленьких букв, возможно, с подчеркиваниями.
 В этой задаче идентификатор будет `collatz_js`. Каталог с задачей должен называться как id задачи. Основной файл с
 исходным кодом должен называться как id задачи. Каталог с ресурсами должен называться как id-resources.
 Класс с задачей должен называться как id задачи с большой буквы (Collatz_js).
 */

//это требуется для компиляции scss файла со стилями для задачи, без webpack эта строка не нужна
import './collatz.scss'

/**
 * создаем класс Collatz, конструктор может быть пустым, инициализация происходит позже.
 * Конструктор может быть вызван не в браузере, поэтому из него нельзя обращаться к DOM.
 * Это необходимо для автоматической проверки решений на сервере.
 *
 * @param settings произвольный объект настроек "лаборатории".
 * Обычно settings содержит только информацию об уровне, например settings = {level : 2}
 * @constructor
 */
export function Collatz_js(settings) {
    this.settings = settings;
}

// Далее перечисляются функции, которые нужно реализовать

/**
 * Возвращается ключ для хранения данных о процессе решения в localstorage, формируется на основе id и данных из
 * настроек. В будущем этот метод будет удалён, ключ будет формироваться автоматически.
 */
Collatz_js.prototype.id = function () {
    return "collatz_js" + this.settings.level;
};

/**
 * Функция инициализации, в этой функции можно создавать интерфейс задачи и уже можно пользоваться KioApi
 * @param domNode dom-узел, который нужно наполнять содержимым задачи
 * @param kioapi ссылка на api для совершения всех действий с задачей
 * @param preferred_width ширина div, в котором нужно создать условие задачи. Рекомендуется не использовать это
 * значение, ширина окна браузера может меняться в процессе работы с лабораторией.
 */
Collatz_js.prototype.initialize = function (domNode, kioapi, preferred_width) {
    console.log('preferred width in problem initialization', preferred_width);

    //сохраняем данные для будущего использования
    this.kioapi = kioapi;
    this.domNode = domNode;

    //settings могут иметь произвольные данные для инициализации, например, уровень
    console.log('problem level is', this.settings.level);

    //инициализируем интерфейс
    //инициализируем содержимое задачи в элементе domNode,
    //initInterface - это наш собственный приватный метод
    //В коде, по историческим причинам, используется jquery. Сейчас рекомендуется разрабатывать без него.
    var $domNode = $(this.domNode);
    this.initInterface($domNode);
};

/**
 * Во всех задачах КИО сравнение решений участников происходит с помощью сравнения значений нескольких параметров.
 * Например, в задаче про 3x + 1 сначала будем сравнивать количество шагов, которые приводят к единице, и будем требовать,
 * чтобы количество шагов было как можно больше. А если количество шагов одинаковое, то смотрим на максимальное число,
 * которое получается при выполнении шагов. Оно должно быть как можно меньше. Соответственно, есть только два параметра
 * для сравнения:
 */
Collatz_js.prototype.parameters = function () {
    return [
        {
            name: "steps", //название параметра
            title: "Количество шагов", //отображение названия для пользователя
            ordering: 'maximize', // 'maximize' - надо как можно больше, 'minimize' - как можно меньше
            view: "ш" // отображение значения параметра пользователю. Можно не указывать.
                      // Если задана строка, как в этом примере, она означает постфикс, т.е. если значение
                      // параметра равно, например, 42, пользователь увидит 42ш.
                      // Либо это может быть функция от одного аргумента, значения параметра, она
                      // должна возвращать строку для отображения пользователю
        },
        {
            name: "max",
            title: "Максимальное число",
            ordering: 'minimize',
            view: function (val) {
                return '[' + val + ']'
            }
        },
        // третий параметр добавлен только ради демонстрации возможности нормализации.
        // Значения параметра перед сравнением могут быть преобразованы — это делает метод normalize, если он указан.
        // В этом примере параметр нормализуется в 0, поэтому при сравнении значений сравниваются одинаковые числа.
        // Как результат, значения этого параметра не влияют на сравнение решений.
        // Этот параметр будет для целей демонстрации выбираться случайным.
        // Другой пример использования нормализации мог бы быть таким — если параметр является вещественным,
        // его можно округлить перед сравнением. Это будет означать, что оценивается только целая часть
        // полученного значения.
        {
            name: "info1",
            title: "Информационный параметр",
            view: function (v) { //отображаем вещественное число как две точки после запятой, и потом процент
                if (!v) v = 0; //эта функция должна завершаться без ошибок для любых входных данных.
                return v.toFixed(2) + "%";
            },
            normalize: function (v) { //перед сравнением параметра значение превращается в 0
                return 0;
            }
        }
    ];
};

/**
 * Статический метод, возвращает список ресурсов, необходимых задаче. Метод не обязателен. Ресурсы возвращаются в формате
 * манифеста для библиотеки preload.js.
 * Метод может вызываться до конструктора.
 *
 * Ресурсы (изображения, звуки) должны находиться в каталоге с именем `[id-задачи]-resources`.
 * Webpack настроен так, что он целиком копирует этот каталог в каталог dist с результатом.
 *
 * В общем случае, путь до ресурса считается от js-файла с задачей. Но т.к. все ресурсы находятся в каталоге
 * `[id-задачи]-resources`, надо указывать этот каталог в пути.
 * @returns [{id: String, src: String}]
 */
Collatz_js.preloadManifest = function () {
    return [
        {id: "1", src: "collatz_js-resources/collatz_conjecture.png"}
    ];
};

/**
 * Возвращает текущее решение в виде объекта,
 * он будет сериализован с помощью JSON.stringify для хранения и передачи по сети, поэтому он должен содержать только
 * строки, числа, массивы, внутренние объекты.
 */
Collatz_js.prototype.solution = function () {
    var x = this.process == null ? 0 : this.process.x;
    return {x: x};
};

/**
 * Загрузка решения в задачу. В качестве аргумента solution будет передан объект, который
 * до этого был сформирован в методе solution. При загрузке решения нужно обновить данные через kioapi.submitResult
 * @param solution решение для загрузки
 */
Collatz_js.prototype.loadSolution = function (solution) {
    if (!solution || !solution.x)
        return;
    var x = solution.x;

    if (x <= 0 || x >= 1000)
        return;

    // Надо вызвать kioapi.submitResult(), это уже делается в обработчике события 'change' поля ввода решения.
    // Поэтому вызываем обработчик этого события:
    this.$input.val('' + x).change();
};

//далее идут приватные методы, специфичные именно для этой задачи

//здесь можно было бы воспользоваться шаблонизатором, но вместо этого всё содержимое создается вручную.
Collatz_js.prototype.initInterface = function ($domNode) {
    var $input_output_container = $("<div class='kio-collatz-input-output-wrapper'>");
    this.$input = $("<input class='number-input' size='3'>");
    this.$output = $("<textarea class='steps-view' readonly='readonly'></textarea>");
    var img = this.kioapi.getResource('1');
    img.className = 'kio-collatz-info-image';

    $domNode.append(img, $input_output_container);
    $input_output_container.append(this.$input, this.$output);

    //add image

    var thisProblem = this;

    this.$input.change(function (evt) {
        var x = +thisProblem.$input.val();
        if (!x || x <= 0 || x >= 1000)
            thisProblem.process = null;
        else
            thisProblem.process = new ThreeXPlusOneProcess(x);

        if (thisProblem.process != null)
            //каждый раз при получении участником результата нужно делать submitResult и передавать объект с результатом
            //проверки.
            thisProblem.kioapi.submitResult({
                steps: thisProblem.process.length(),
                max: thisProblem.process.max(),
                info1: Math.random() // бессмысленный информационный параметр,
                                     // в реальной программе параметры должны быть детерминировны условием
            });
        thisProblem.updateView();
    });

    //загружаем начальное решение. Это то решение, которое увидит участник, впервые открыв задачу
    this.loadSolution({x: 5});
};

Collatz_js.prototype.updateView = function () {
    if (this.process == null)
        this.$output.text('Неверный ввод');
    else
        this.$output.text(this.process.steps.join(' -> ') + '\n\n' + this.process.max());
};

//модель
function ThreeXPlusOneProcess(x) {
    this.x = x;
    this.steps = [x];
    while (x !== 1) {
        if (x % 2 === 0)
            x = x / 2;
        else
            x = 3 * x + 1;
        this.steps.push(x);
    }
}

ThreeXPlusOneProcess.prototype.length = function () {
    return this.steps.length;
};

ThreeXPlusOneProcess.prototype.max = function () {
    var max = 0;

    for (var i = 0; i < this.steps.length; i++)
        if (max < this.steps[i])
            max = this.steps[i];

    return max;
};
